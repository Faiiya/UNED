
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 15 22:38:59 CEST 2019
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 15 22:38:59 CEST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\061\002\000\002\002" +
    "\004\000\002\003\005\000\002\004\002\000\002\005\005" +
    "\000\002\062\002\000\002\005\006\000\002\005\005\000" +
    "\002\021\006\000\002\045\005\000\002\045\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\057\010\000\002\057\012\000\002\057\013\000" +
    "\002\057\015\000\002\060\014\000\002\006\004\000\002" +
    "\006\003\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\010\005\000\002\010\004" +
    "\000\002\011\005\000\002\011\005\000\002\012\005\000" +
    "\002\012\004\000\002\013\014\000\002\013\014\000\002" +
    "\014\005\000\002\014\004\000\002\015\006\000\002\017" +
    "\004\000\002\017\003\000\002\020\004\000\002\020\004" +
    "\000\002\055\017\000\002\047\005\000\002\047\005\000" +
    "\002\047\005\000\002\056\014\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\027\005\000" +
    "\002\027\005\000\002\026\005\000\002\026\005\000\002" +
    "\037\007\000\002\037\007\000\002\053\006\000\002\041" +
    "\006\000\002\041\006\000\002\041\003\000\002\042\005" +
    "\000\002\042\003\000\002\043\005\000\002\043\003\000" +
    "\002\031\005\000\002\031\005\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\005\000\002\033\005" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\044\005\000\002\044" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\046\003\000\002\046\003\000\002\036\003\000" +
    "\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\004\010\000\001\002\000\004\002\367\001" +
    "\002\000\004\010\010\001\002\000\014\031\ufffd\041\ufffd" +
    "\042\ufffd\046\ufffd\050\ufffd\001\002\000\004\002\uffff\001" +
    "\002\000\006\003\012\026\011\001\002\000\006\003\015" +
    "\052\016\001\002\000\004\052\ufffb\001\002\000\004\052" +
    "\014\001\002\000\014\031\ufffa\041\ufffa\042\ufffa\046\ufffa" +
    "\050\ufffa\001\002\000\014\031\ufff9\041\ufff9\042\ufff9\046" +
    "\ufff9\050\ufff9\001\002\000\014\031\ufffc\041\ufffc\042\ufffc" +
    "\046\ufffc\050\ufffc\001\002\000\014\031\025\041\022\042" +
    "\024\046\026\050\027\001\002\000\014\031\uffe8\041\uffe8" +
    "\042\uffe8\046\uffe8\050\uffe8\001\002\000\004\002\ufffe\001" +
    "\002\000\006\015\304\023\302\001\002\000\014\031\uffe9" +
    "\041\uffe9\042\uffe9\046\uffe9\050\uffe9\001\002\000\004\026" +
    "\262\001\002\000\004\026\241\001\002\000\004\026\230" +
    "\001\002\000\026\012\ufffd\013\ufffd\016\ufffd\020\ufffd\026" +
    "\ufffd\032\ufffd\034\ufffd\035\ufffd\047\ufffd\060\ufffd\001\002" +
    "\000\026\012\054\013\042\016\037\020\047\026\040\032" +
    "\043\034\035\035\033\047\050\060\046\001\002\000\034" +
    "\007\ufff6\012\ufff6\013\ufff6\016\ufff6\020\ufff6\026\ufff6\030" +
    "\ufff6\032\ufff6\034\ufff6\035\ufff6\047\ufff6\060\ufff6\062\ufff6" +
    "\001\002\000\022\006\uffab\027\uffab\040\uffb3\043\uffb3\044" +
    "\uffb3\051\uffab\056\uffab\057\222\001\002\000\026\005\uff91" +
    "\006\uff91\027\uff91\037\uff91\051\uff91\052\uff91\053\uff91\055" +
    "\uff91\056\uff91\061\uff91\001\002\000\012\006\136\027\132" +
    "\051\135\056\134\001\002\000\016\013\042\026\167\032" +
    "\043\034\035\035\033\060\046\001\002\000\012\040\061" +
    "\043\062\044\063\053\ufff3\001\002\000\004\026\207\001" +
    "\002\000\026\006\uffac\027\uffac\034\172\040\uffb5\043\uffb5" +
    "\044\uffb5\051\uffac\056\uffac\057\171\060\077\001\002\000" +
    "\004\053\ufff5\001\002\000\020\037\uffb4\040\uffb4\043\uffb4" +
    "\044\uffb4\053\uffb4\055\uffb4\061\uffb4\001\002\000\026\005" +
    "\uff90\006\uff90\027\uff90\037\uff90\051\uff90\052\uff90\053\uff90" +
    "\055\uff90\056\uff90\061\uff90\001\002\000\014\006\136\027" +
    "\132\051\135\053\ufff4\056\134\001\002\000\004\053\170" +
    "\001\002\000\016\013\042\026\167\032\043\034\035\035" +
    "\033\060\046\001\002\000\014\026\127\032\043\034\125" +
    "\035\033\060\126\001\002\000\004\034\106\001\002\000" +
    "\004\053\uffef\001\002\000\004\053\ufff2\001\002\000\022" +
    "\005\uffad\006\uffad\027\uffad\037\uffad\051\uffad\053\uffad\056" +
    "\uffad\061\uffad\001\002\000\004\045\105\001\002\000\004" +
    "\053\ufff0\001\002\000\004\053\ufff1\001\002\000\010\040" +
    "\061\043\062\044\063\001\002\000\012\013\042\026\064" +
    "\034\067\060\066\001\002\000\012\013\uffb1\026\uffb1\034" +
    "\uffb1\060\uffb1\001\002\000\012\013\uffb2\026\uffb2\034\uffb2" +
    "\060\uffb2\001\002\000\012\013\uffb0\026\uffb0\034\uffb0\060" +
    "\uffb0\001\002\000\022\037\uffb5\040\uffb5\043\uffb5\044\uffb5" +
    "\053\uffb5\055\uffb5\060\077\061\uffb5\001\002\000\020\037" +
    "\uffb3\040\uffb3\043\uffb3\044\uffb3\053\uffb3\055\uffb3\061\uffb3" +
    "\001\002\000\012\013\042\026\064\034\067\060\066\001" +
    "\002\000\012\013\042\026\064\034\067\060\066\001\002" +
    "\000\020\037\uffc4\040\uffc4\043\uffc4\044\uffc4\053\uffc4\055" +
    "\uffc4\061\uffc4\001\002\000\012\037\073\040\061\043\062" +
    "\044\063\001\002\000\012\013\042\026\064\034\067\060" +
    "\066\001\002\000\020\037\uffb6\040\uffb6\043\uffb6\044\uffb6" +
    "\053\uffb6\055\uffb6\061\uffb6\001\002\000\020\037\uffc5\040" +
    "\uffc5\043\uffc5\044\uffc5\053\uffc5\055\uffc5\061\uffc5\001\002" +
    "\000\012\040\061\043\062\044\063\061\076\001\002\000" +
    "\020\037\uffb7\040\uffb7\043\uffb7\044\uffb7\053\uffb7\055\uffb7" +
    "\061\uffb7\001\002\000\006\013\100\026\101\001\002\000" +
    "\004\061\uff95\001\002\000\006\060\077\061\uff94\001\002" +
    "\000\004\061\uff96\001\002\000\004\061\104\001\002\000" +
    "\036\005\uffbf\006\uffbf\027\uffbf\037\uffbf\040\uffbf\043\uffbf" +
    "\044\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\061\uffbf\001\002\000\004\002\ufff8\001\002\000\020" +
    "\013\107\025\113\026\114\034\067\037\ufffd\055\ufffd\060" +
    "\066\001\002\000\014\037\uff9d\040\uffb4\043\uffb4\044\uffb4" +
    "\055\uff9d\001\002\000\014\037\uff9b\040\061\043\062\044" +
    "\063\055\uff9b\001\002\000\006\037\ufffd\055\116\001\002" +
    "\000\014\037\uff9a\040\uffb3\043\uffb3\044\uffb3\055\uff9a\001" +
    "\002\000\006\037\uff9e\055\uff9e\001\002\000\016\037\uff9c" +
    "\040\uffb5\043\uffb5\044\uffb5\055\uff9c\060\077\001\002\000" +
    "\006\037\uff99\055\uff99\001\002\000\020\013\107\025\113" +
    "\026\114\034\067\037\ufffd\055\ufffd\060\066\001\002\000" +
    "\004\037\121\001\002\000\004\037\uff97\001\002\000\004" +
    "\053\uffc1\001\002\000\006\037\ufffd\055\116\001\002\000" +
    "\004\037\uff98\001\002\000\022\005\uffab\006\uffab\027\uffab" +
    "\037\uffab\051\uffab\053\uffab\056\uffab\061\uffab\001\002\000" +
    "\014\026\127\032\043\034\146\035\033\060\126\001\002" +
    "\000\014\026\127\032\043\034\146\035\033\060\126\001" +
    "\002\000\024\005\uffac\006\uffac\027\uffac\037\uffac\051\uffac" +
    "\053\uffac\056\uffac\060\077\061\uffac\001\002\000\014\005" +
    "\133\006\136\027\132\051\135\056\134\001\002\000\014" +
    "\026\127\032\043\034\146\035\033\060\126\001\002\000" +
    "\014\026\uffa7\032\uffa7\034\uffa7\035\uffa7\060\uffa7\001\002" +
    "\000\004\052\137\001\002\000\014\026\uffa8\032\uffa8\034" +
    "\uffa8\035\uffa8\060\uffa8\001\002\000\014\026\uffaa\032\uffaa" +
    "\034\uffaa\035\uffaa\060\uffaa\001\002\000\014\026\uffa9\032" +
    "\uffa9\034\uffa9\035\uffa9\060\uffa9\001\002\000\030\013\ufffd" +
    "\016\ufffd\020\ufffd\026\ufffd\030\ufffd\032\ufffd\034\ufffd\035" +
    "\ufffd\047\ufffd\060\ufffd\062\ufffd\001\002\000\030\013\042" +
    "\016\037\020\047\026\040\030\141\032\043\034\035\035" +
    "\033\047\050\060\046\062\142\001\002\000\004\052\143" +
    "\001\002\000\004\053\uffee\001\002\000\026\013\ufffd\016" +
    "\ufffd\020\ufffd\026\ufffd\032\ufffd\034\ufffd\035\ufffd\047\ufffd" +
    "\060\ufffd\062\ufffd\001\002\000\026\013\042\016\037\020" +
    "\047\026\040\032\043\034\035\035\033\047\050\060\046" +
    "\062\145\001\002\000\004\053\uffec\001\002\000\014\026" +
    "\127\032\043\034\146\035\033\060\126\001\002\000\022" +
    "\005\uffc3\006\uffc3\027\uffc3\037\uffc3\051\uffc3\053\uffc3\056" +
    "\uffc3\061\uffc3\001\002\000\014\006\136\027\132\037\151" +
    "\051\135\056\134\001\002\000\022\005\uffae\006\uffae\027" +
    "\uffae\037\uffae\051\uffae\053\uffae\056\uffae\061\uffae\001\002" +
    "\000\014\006\136\027\132\051\135\056\134\061\153\001" +
    "\002\000\022\005\uffaf\006\uffaf\027\uffaf\037\uffaf\051\uffaf" +
    "\053\uffaf\056\uffaf\061\uffaf\001\002\000\014\006\136\027" +
    "\132\037\155\051\135\056\134\001\002\000\014\005\156" +
    "\006\uffae\027\uffae\051\uffae\056\uffae\001\002\000\004\052" +
    "\157\001\002\000\030\013\ufffd\016\ufffd\020\ufffd\026\ufffd" +
    "\030\ufffd\032\ufffd\034\ufffd\035\ufffd\047\ufffd\060\ufffd\062" +
    "\ufffd\001\002\000\030\013\042\016\037\020\047\026\040" +
    "\030\161\032\043\034\035\035\033\047\050\060\046\062" +
    "\162\001\002\000\004\052\163\001\002\000\004\053\uffed" +
    "\001\002\000\026\013\ufffd\016\ufffd\020\ufffd\026\ufffd\032" +
    "\ufffd\034\ufffd\035\ufffd\047\ufffd\060\ufffd\062\ufffd\001\002" +
    "\000\026\013\042\016\037\020\047\026\040\032\043\034" +
    "\035\035\033\047\050\060\046\062\165\001\002\000\004" +
    "\053\uffeb\001\002\000\020\006\uffab\027\uffab\040\uffb3\043" +
    "\uffb3\044\uffb3\051\uffab\056\uffab\001\002\000\022\006\uffac" +
    "\027\uffac\040\uffb5\043\uffb5\044\uffb5\051\uffac\056\uffac\060" +
    "\077\001\002\000\034\007\ufff7\012\ufff7\013\ufff7\016\ufff7" +
    "\020\ufff7\026\ufff7\030\ufff7\032\ufff7\034\ufff7\035\ufff7\047" +
    "\ufff7\060\ufff7\062\ufff7\001\002\000\020\013\176\026\204" +
    "\032\043\034\035\035\033\047\050\060\046\001\002\000" +
    "\020\013\107\025\113\026\114\034\067\037\ufffd\055\ufffd" +
    "\060\066\001\002\000\006\037\ufffd\055\116\001\002\000" +
    "\004\037\175\001\002\000\004\053\uffc0\001\002\000\012" +
    "\040\uffb4\043\uffb4\044\uffb4\053\uffa6\001\002\000\012\040" +
    "\061\043\062\044\063\053\uffcf\001\002\000\004\053\uffcd" +
    "\001\002\000\022\006\uffab\027\uffab\040\uffb3\043\uffb3\044" +
    "\uffb3\051\uffab\053\uffa4\056\uffab\001\002\000\004\053\uffcc" +
    "\001\002\000\004\053\uffcb\001\002\000\026\006\uffac\027" +
    "\uffac\034\172\040\uffb5\043\uffb5\044\uffb5\051\uffac\053\uffa5" +
    "\056\uffac\060\077\001\002\000\014\006\136\027\132\051" +
    "\135\053\uffce\056\134\001\002\000\014\006\uffad\027\uffad" +
    "\051\uffad\053\uffa3\056\uffad\001\002\000\004\036\210\001" +
    "\002\000\004\013\211\001\002\000\004\054\212\001\002" +
    "\000\004\013\213\001\002\000\004\052\214\001\002\000" +
    "\026\012\ufffd\013\ufffd\016\ufffd\020\ufffd\026\ufffd\032\ufffd" +
    "\034\ufffd\035\ufffd\047\ufffd\060\ufffd\001\002\000\026\012" +
    "\216\013\042\016\037\020\047\026\040\032\043\034\035" +
    "\035\033\047\050\060\046\001\002\000\004\016\217\001" +
    "\002\000\004\053\uffea\001\002\000\014\026\127\032\043" +
    "\034\146\035\033\060\126\001\002\000\022\005\uffc2\006" +
    "\uffc2\027\uffc2\037\uffc2\051\uffc2\053\uffc2\056\uffc2\061\uffc2" +
    "\001\002\000\020\013\176\026\204\032\043\034\035\035" +
    "\033\047\050\060\046\001\002\000\012\040\061\043\062" +
    "\044\063\053\uffca\001\002\000\004\053\uffc8\001\002\000" +
    "\004\053\uffc7\001\002\000\004\053\uffc6\001\002\000\014" +
    "\006\136\027\132\051\135\053\uffc9\056\134\001\002\000" +
    "\004\057\236\001\002\000\016\026\230\031\uffe7\041\uffe7" +
    "\042\uffe7\046\uffe7\050\uffe7\001\002\000\004\053\233\001" +
    "\002\000\016\026\uffe2\031\uffe2\041\uffe2\042\uffe2\046\uffe2" +
    "\050\uffe2\001\002\000\004\053\235\001\002\000\016\026" +
    "\uffe3\031\uffe3\041\uffe3\042\uffe3\046\uffe3\050\uffe3\001\002" +
    "\000\010\013\237\032\043\035\033\001\002\000\004\053" +
    "\uffe1\001\002\000\004\053\uffe0\001\002\000\006\052\ufffd" +
    "\055\247\001\002\000\004\053\246\001\002\000\016\026" +
    "\241\031\uffe5\041\uffe5\042\uffe5\046\uffe5\050\uffe5\001\002" +
    "\000\004\053\245\001\002\000\016\026\uffdb\031\uffdb\041" +
    "\uffdb\042\uffdb\046\uffdb\050\uffdb\001\002\000\016\026\uffda" +
    "\031\uffda\041\uffda\042\uffda\046\uffda\050\uffda\001\002\000" +
    "\004\026\260\001\002\000\004\052\252\001\002\000\004" +
    "\052\uffb8\001\002\000\010\011\256\017\257\026\253\001" +
    "\002\000\006\053\uffa0\060\077\001\002\000\004\053\uff9f" +
    "\001\002\000\004\053\uffd9\001\002\000\004\053\uffa2\001" +
    "\002\000\004\053\uffa1\001\002\000\006\052\ufffd\055\247" +
    "\001\002\000\004\052\uffb9\001\002\000\004\057\270\001" +
    "\002\000\004\053\267\001\002\000\016\026\262\031\uffe6" +
    "\041\uffe6\042\uffe6\046\uffe6\050\uffe6\001\002\000\004\053" +
    "\266\001\002\000\016\026\uffdf\031\uffdf\041\uffdf\042\uffdf" +
    "\046\uffdf\050\uffdf\001\002\000\016\026\uffde\031\uffde\041" +
    "\uffde\042\uffde\046\uffde\050\uffde\001\002\000\004\022\271" +
    "\001\002\000\004\060\272\001\002\000\004\013\273\001" +
    "\002\000\004\054\274\001\002\000\004\013\275\001\002" +
    "\000\004\061\276\001\002\000\004\004\277\001\002\000" +
    "\006\011\301\017\300\001\002\000\004\053\uffdc\001\002" +
    "\000\004\053\uffdd\001\002\000\004\026\340\001\002\000" +
    "\020\015\304\023\302\031\uffe4\041\uffe4\042\uffe4\046\uffe4" +
    "\050\uffe4\001\002\000\004\026\306\001\002\000\020\015" +
    "\uffd7\023\uffd7\031\uffd7\041\uffd7\042\uffd7\046\uffd7\050\uffd7" +
    "\001\002\000\004\034\310\001\002\000\020\015\uffd5\023" +
    "\uffd5\031\uffd5\041\uffd5\042\uffd5\046\uffd5\050\uffd5\001\002" +
    "\000\014\013\311\026\315\032\043\035\033\037\ufffd\001" +
    "\002\000\006\052\uffa6\055\uffa6\001\002\000\006\052\uffa4" +
    "\055\uffa4\001\002\000\004\037\330\001\002\000\006\052" +
    "\ufffd\055\320\001\002\000\010\052\uffa5\055\uffa5\060\077" +
    "\001\002\000\004\037\uffbc\001\002\000\006\052\uffa3\055" +
    "\uffa3\001\002\000\012\013\311\026\315\032\043\035\033" +
    "\001\002\000\004\052\323\001\002\000\004\052\uffba\001" +
    "\002\000\006\011\325\017\324\001\002\000\004\037\uffbd" +
    "\001\002\000\004\037\uffbe\001\002\000\006\052\ufffd\055" +
    "\320\001\002\000\004\052\uffbb\001\002\000\004\052\331" +
    "\001\002\000\014\031\ufffd\041\ufffd\042\ufffd\046\ufffd\050" +
    "\ufffd\001\002\000\014\031\025\041\022\042\024\046\026" +
    "\050\333\001\002\000\026\012\ufffd\013\ufffd\016\ufffd\020" +
    "\ufffd\026\ufffd\032\ufffd\034\ufffd\035\ufffd\047\ufffd\060\ufffd" +
    "\001\002\000\026\012\335\013\042\016\037\020\047\026" +
    "\040\032\043\034\035\035\033\047\050\060\046\001\002" +
    "\000\004\053\336\001\002\000\020\015\uffd0\023\uffd0\031" +
    "\uffd0\041\uffd0\042\uffd0\046\uffd0\050\uffd0\001\002\000\020" +
    "\015\uffd8\023\uffd8\031\uffd8\041\uffd8\042\uffd8\046\uffd8\050" +
    "\uffd8\001\002\000\004\034\342\001\002\000\020\015\uffd6" +
    "\023\uffd6\031\uffd6\041\uffd6\042\uffd6\046\uffd6\050\uffd6\001" +
    "\002\000\014\013\311\026\315\032\043\035\033\037\ufffd" +
    "\001\002\000\004\037\344\001\002\000\004\052\345\001" +
    "\002\000\006\011\347\017\350\001\002\000\004\052\351" +
    "\001\002\000\004\052\uff93\001\002\000\004\052\uff92\001" +
    "\002\000\014\031\ufffd\041\ufffd\042\ufffd\046\ufffd\050\ufffd" +
    "\001\002\000\014\031\025\041\022\042\024\046\026\050" +
    "\353\001\002\000\026\007\ufffd\013\ufffd\016\ufffd\020\ufffd" +
    "\026\ufffd\032\ufffd\034\ufffd\035\ufffd\047\ufffd\060\ufffd\001" +
    "\002\000\026\007\356\013\042\016\037\020\047\026\040" +
    "\032\043\034\035\035\033\047\050\060\046\001\002\000" +
    "\004\012\365\001\002\000\012\013\357\026\360\032\043" +
    "\035\033\001\002\000\004\053\364\001\002\000\004\053" +
    "\363\001\002\000\004\053\362\001\002\000\004\012\uffd1" +
    "\001\002\000\004\012\uffd3\001\002\000\004\012\uffd2\001" +
    "\002\000\004\053\366\001\002\000\020\015\uffd4\023\uffd4" +
    "\031\uffd4\041\uffd4\042\uffd4\046\uffd4\050\uffd4\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\006\002\003\061\004\001\001\000\002\001" +
    "\001\000\006\003\006\005\005\001\001\000\006\004\017" +
    "\006\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\022\021\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\302\020\304\001\001\000\002\001" +
    "\001\000\006\012\263\013\262\001\001\000\006\014\242" +
    "\015\241\001\001\000\006\010\230\011\231\001\001\000" +
    "\006\004\030\045\027\001\001\000\032\023\044\026\043" +
    "\027\035\030\051\031\056\033\033\035\040\036\052\037" +
    "\055\053\031\057\054\060\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\217\001" +
    "\001\000\016\026\147\027\070\031\056\033\033\036\052" +
    "\053\165\001\001\000\004\032\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\130\001\001\000\002\001" +
    "\001\000\016\026\151\027\074\031\056\033\033\036\052" +
    "\053\165\001\001\000\012\026\127\033\033\036\052\053" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\057\001\001\000\006" +
    "\031\067\053\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\074\031\056\053\064\001\001\000\010\027" +
    "\070\031\056\053\064\001\001\000\002\001\001\000\004" +
    "\032\071\001\001\000\006\031\073\053\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\071\001\001" +
    "\000\002\001\001\000\006\053\101\054\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\114\027\107\031\056\040\110\053\111\001\001\000\002" +
    "\001\001\000\004\032\071\001\001\000\006\004\117\044" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\114\027\107\031" +
    "\056\040\121\053\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\117\044\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\153" +
    "\033\033\036\052\053\123\001\001\000\012\026\151\033" +
    "\033\036\052\053\123\001\001\000\002\001\001\000\004" +
    "\034\130\001\001\000\010\033\146\036\052\053\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\030\045" +
    "\137\001\001\000\032\023\044\026\043\027\035\030\051" +
    "\031\056\033\033\035\040\036\052\037\055\053\031\057" +
    "\054\060\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\030\045\143\001\001\000\032\023\044\026" +
    "\043\027\035\030\051\031\056\033\033\035\040\036\052" +
    "\037\055\053\031\057\054\060\050\001\001\000\002\001" +
    "\001\000\012\026\147\033\033\036\052\053\123\001\001" +
    "\000\002\001\001\000\004\034\130\001\001\000\002\001" +
    "\001\000\004\034\130\001\001\000\002\001\001\000\004" +
    "\034\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\030\045\157\001\001\000\032\023\044\026\043" +
    "\027\035\030\051\031\056\033\033\035\040\036\052\037" +
    "\055\053\031\057\054\060\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\030\045\163\001\001\000" +
    "\032\023\044\026\043\027\035\030\051\031\056\033\033" +
    "\035\040\036\052\037\055\053\031\057\054\060\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\026\204\027\176\030\177\031" +
    "\056\033\033\036\205\037\201\052\202\053\200\001\001" +
    "\000\014\004\114\027\107\031\056\040\172\053\111\001" +
    "\001\000\006\004\117\044\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\030\045\214\001\001\000\032\023\044\026\043" +
    "\027\035\030\051\031\056\033\033\035\040\036\052\037" +
    "\055\053\031\057\054\060\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\033\220\036\052\053\123\001" +
    "\001\000\002\001\001\000\024\026\226\027\222\030\223" +
    "\031\056\033\033\036\205\037\224\052\225\053\200\001" +
    "\001\000\004\032\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\130\001\001\000" +
    "\002\001\001\000\004\011\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\250\043\247\001\001\000\002\001\001\000" +
    "\004\015\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\254\053\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\250\043\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\340\001\001\000\004" +
    "\020\336\001\001\000\004\056\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\315" +
    "\036\316\041\312\052\313\053\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\321" +
    "\042\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\036\316\052\325\053\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\321\042\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\017\006\331\001\001\000\004\007\022\001\001\000\006" +
    "\004\030\045\333\001\001\000\032\023\044\026\043\027" +
    "\035\030\051\031\056\033\033\035\040\036\052\037\055" +
    "\053\031\057\054\060\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\315\036\316\041\342\052\313\053" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\017\006\351\001\001\000\004" +
    "\007\022\001\001\000\006\004\030\045\353\001\001\000" +
    "\034\023\044\026\043\027\035\030\051\031\056\033\033" +
    "\035\040\036\052\037\055\047\354\053\031\057\054\060" +
    "\050\001\001\000\002\001\001\000\004\036\360\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // boolean ::= FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // boolean ::= CIERTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipoprimitivo ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoprimitivo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipoprimitivo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoprimitivo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valorvector ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorvector",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valorvector ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorvector",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valorvector ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorvector",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // listavalfuncion ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavalfuncion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // listavalfuncion ::= COMA valfuncion listavalfuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavalfuncion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // valfuncion ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valfuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valfuncion ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valfuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valfuncion ::= expArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valfuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valfuncion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valfuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valfuncion ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valfuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valfuncion ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valfuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valorVAR ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorVAR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valorVAR ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorVAR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valorVAR ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorVAR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valorVAR ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorVAR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // symbolexplogica ::= EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbolexplogica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // symbolexplogica ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbolexplogica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // symbolexplogica ::= NO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbolexplogica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // symbolexplogica ::= Y 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbolexplogica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valexplogica ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valexplogica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valexplogica ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valexplogica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valexplogica ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valexplogica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valexplogica ::= PARL expLogica PARR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valexplogica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valexplogica ::= BRACKETL expLogica BRACKETR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valexplogica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // symbolexparit ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbolexparit",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // symbolexparit ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbolexparit",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // symbolexparit ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbolexparit",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valexparit ::= vector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valexparit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valexparit ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valexparit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valexparit ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valexparit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valexparit ::= PARL expArit PARR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valexparit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valexparit ::= BRACKETL expArit BRACKETR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valexparit",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listaID ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // listaID ::= COMA ID listaID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaID",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // listavalor ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavalor",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // listavalor ::= COMA valor listavalor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavalor",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listavalorsubfuncion ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavalorsubfuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listavalorsubfuncion ::= valor listavalor DOSP BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavalorsubfuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // listavalorsubfuncion ::= valor listavalor DOSP ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavalorsubfuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // vector ::= ID BRACKETL valorvector BRACKETR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funcion ::= ID PARL valfuncion listavalfuncion PARR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // funcion ::= ESCRIBIR PARL valfuncion listavalfuncion PARR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expLogica ::= valexplogica symbolexplogica valexplogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expLogica ::= expLogica symbolexplogica valexplogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expArit ::= valexparit symbolexparit valexparit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expArit ::= expArit symbolexparit valexparit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacion ::= vector ASIGN valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacion ::= vector ASIGN funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacion ::= vector ASIGN expVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignacion ::= vector ASIGN expLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacion ::= vector ASIGN expArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignacion ::= ID ASIGN valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion ::= ID ASIGN funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion ::= ID ASIGN expVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion ::= ID ASIGN expLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion ::= ID ASIGN expArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // subprocedimiento ::= ID PARL listavalorsubfuncion PARR DOSP declaraciones COMIENZO codigo FIN PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprocedimiento",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // devolver ::= DEVOLVER boolean PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("devolver",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // devolver ::= DEVOLVER NUM PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("devolver",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // devolver ::= DEVOLVER ID PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("devolver",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // subfuncion ::= ID PARL listavalorsubfuncion PARR DOSP tipoprimitivo DOSP declaraciones COMIENZO codigo devolver FIN PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subfuncion",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // subprograma ::= PROCEDIMIENTO subprocedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // subprograma ::= FUNCION subfuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // subprogramas ::= subprogramas subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable ::= ID listaID DOSP valorVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variables ::= variable PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variables ::= variables variable PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo ::= ID ASIGN VECTOR BRACKETL NUM PUNTOP NUM BRACKETR DE BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo ::= ID ASIGN VECTOR BRACKETL NUM PUNTOP NUM BRACKETR DE ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipos ::= tipo PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipos ::= tipos tipo PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constante ::= ID ASIGN boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // constante ::= ID ASIGN NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // constantes ::= constante PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // constantes ::= constantes constante PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion ::= SUBPROGRAMAS subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion ::= VARIABLES variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion ::= TIPOS tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion ::= CONSTANTES constantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaraciones ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaraciones ::= declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciapara ::= PARA ID EN NUM PUNTOP NUM DOSP codigo FIN PARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciapara",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciasi ::= SI PARL expLogica PARR ENTONCES DOSP codigo SINO DOSP codigo FINSI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasi",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentenciasi ::= SI expLogica ENTONCES DOSP codigo SINO DOSP codigo FINSI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasi",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentenciasi ::= SI PARL expLogica PARR ENTONCES DOSP codigo FINSI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasi",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentenciasi ::= SI expLogica ENTONCES DOSP codigo FINSI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasi",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentenciapara 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentenciasi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= expVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= expArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= expLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= codigo sentencia PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main ::= COMIENZO codigo FIN PUNTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracionPrograma ::= PROGRAMA ID error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo("[SYNTAX ERROR] Se esperaban dos puntos");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracionPrograma ::= PROGRAMA error NT$1 DOSP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo("[SYNTAX ERROR] Se esperaba un identificador");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracionPrograma ::= PROGRAMA ID DOSP 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("[SYNTAX INFO] - declaracion del programa: "+p.getLexema()+" "+i.getLexema()+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= declaracionPrograma declaraciones main 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		// List intermediateCode = ax.getIntermediateCode ();
  		// finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega de Junio deberán descomentarse y usarse..
  		// Produced by MV tools 2019-08-01 18:15:29

  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

